// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model YoungPeople {
  id                     String                  @id @default(uuid())
  lastName               String
  firstName              String
  middleName             String?
  suffix                 String?
  dateOfBirth            DateTime?
  age                    Int?
  gender                 Gender
  Registration           Registration[]
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  updatedBy              String?
  image                  String?
  ContactPersonEmergency ContactPersonEmergency?
}

model Registration {
  id                String           @id @default(uuid())
  YoungPeople       YoungPeople      @relation(fields: [youngPeopleId], references: [id])
  youngPeopleId     String
  dateRegistered    DateTime
  GradeLevel        GradeLevel       @relation(fields: [gradeLevelId], references: [id])
  gradeLevelId      String
  Hall              Hall?            @relation(fields: [hallId], references: [id])
  hallId            String?
  Classification    Classification   @relation(fields: [classificationId], references: [id])
  classificationId  String
  remarks           String?
  BasicHealthInfo   BasicHealthInfo? @relation(fields: [basicHealthInfoId], references: [id])
  basicHealthInfoId String?
  Group             Group?           @relation(fields: [groupId], references: [id])
  groupId           String?
  isCheckedIn       Boolean          @default(false)
  checkedInAt       DateTime?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  updatedBy         String?
}

model GradeLevel {
  id           String         @id @default(uuid())
  name         String
  Registration Registration[]
}

model Hall {
  id           String         @id @default(uuid())
  name         String
  Registration Registration[]
}

model Classification {
  id           String         @id @default(uuid())
  name         String
  Registration Registration[]
}

model BasicHealthInfo {
  id                         String         @id @default(uuid())
  isAllergy                  Boolean?
  allergyDescription         String?
  allergyMedicine            String?
  isHealthCondition          Boolean?
  healthConditionDescription String?
  healthConditionMedication  String?
  Registration               Registration[]
}

model ContactPersonEmergency {
  id            String       @id @default(uuid())
  name          String?
  relationship  String?
  contactNumber String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  youngPeople   YoungPeople? @relation(fields: [youngPersonId], references: [id])
  youngPersonId String?      @unique
}

model Group {
  id             String         @id @default(uuid())
  name           String         @unique
  description    String?
  maxMembers     Int?
  currentMembers Int            @default(0)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  createdBy      String?
  isActive       Boolean        @default(true)
  registrations  Registration[]
}

enum Gender {
  Brother
  Sister
}

// Better Auth Models
model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isActive      Boolean   @default(true)
  loginAttempts Int       @default(0)
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
